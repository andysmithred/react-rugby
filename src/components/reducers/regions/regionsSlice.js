import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { addRegionAPI, deleteRegionAPI, fetchRegionAPI, fetchRegionsAPI, updateRegionAPI } from "./regionsAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchRegions = createAsyncThunk(
  "regions/fetchRegions",
  async () => {
    const response = await fetchRegionsAPI();
    return response;
  }
);

export const fetchRegion = createAsyncThunk(
  "regions/fetchRegion",
  async (regionId) => {
    const response = await fetchRegionAPI(regionId);
    return response;
  }
);

export const addRegion = createAsyncThunk("regions/addRegion", async (region) => {
  const response = await addRegionAPI(region);
  return response;
});

export const updateRegion = createAsyncThunk(
  "regions/updateRegion",
  async (updatedRegion) => {
    const response = await updateRegionAPI(updatedRegion);
    return response;
  }
);

export const deleteRegion = createAsyncThunk("regions/deleteRegion", async (id) => {
  await deleteRegionAPI(id);
  return id;
});


// Slice

export const regionsSlice = createSlice({
  name: "regions",
  initialState,
  reducers: {
    filterRegions: (state, action) => {
      state.filter = action.payload;
    },
    setRegionsView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchRegions.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchRegions.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchRegion.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchRegion.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addRegion.fulfilled, (state, action) => {
        // state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updateRegion.fulfilled, (state, action) => {
        state.item = action.payload;
        // state.items = state.items.map((item) =>
        //   item.regionId === action.payload.regionId ? action.payload : item
        // );
        state.view = "details";
      })
      .addCase(deleteRegion.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.regionId !== action.payload
        );
        state.item = null;
        state.view = "index";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterRegions, setRegionsView } = regionsSlice.actions;

export default regionsSlice.reducer;
