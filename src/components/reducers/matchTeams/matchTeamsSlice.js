import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchMatchTeamsAPI,
  fetchMatchTeamAPI,
  addMatchTeamAPI,
  updateMatchTeamAPI,
  deleteMatchTeamAPI,
} from "./matchTeamsAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchMatchTeams = createAsyncThunk(
  "matchTeams/fetchMatchTeams",
  async () => {
    const response = await fetchMatchTeamsAPI();
    return response;
  }
);

export const fetchMatchTeam = createAsyncThunk(
  "matchTeams/fetchMatchTeam",
  async (id) => {
    const response = await fetchMatchTeamAPI(id);
    return response;
  }
);

export const addMatchTeam = createAsyncThunk(
  "matchTeams/addMatchTeam",
  async (item) => {
    const response = await addMatchTeamAPI(item);
    return response;
  }
);

export const updateMatchTeam = createAsyncThunk(
  "matchTeams/updateMatchTeam",
  async (item) => {
    const response = await updateMatchTeamAPI(item);
    return response;
  }
);

export const deleteMatchTeam = createAsyncThunk(
  "matchTeams/deleteMatchTeam",
  async (id) => {
    await deleteMatchTeamAPI(id);
    return id;
  }
);

// slice

export const matchTeamsSlice = createSlice({
  name: "matchTeams",
  initialState,
  reducers: {
    filterMatchTeams: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchMatchTeams.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchMatchTeams.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchMatchTeam.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchMatchTeam.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addMatchTeam.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updateMatchTeam.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.matchTeamId === action.payload.matchTeamId
            ? action.payload
            : item
        );
        state.view = "details";
      })
      .addCase(deleteMatchTeam.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.matchTeamId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterMatchTeams, setView } = matchTeamsSlice.actions;
export default matchTeamsSlice.reducer;
