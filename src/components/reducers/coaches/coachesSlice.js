import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchCoachesAPI,
  fetchCoachAPI,
  addCoachAPI,
  updateCoachAPI,
  deleteCoachAPI,
} from "./coachesAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchCoaches = createAsyncThunk(
  "coaches/fetchCoaches",
  async () => {
    const response = await fetchCoachesAPI();
    return response;
  }
);

export const fetchCoach = createAsyncThunk(
  "coaches/fetchCoach",
  async (id) => {
    const response = await fetchCoachAPI(id);
    return response;
  }
);

export const addCoach = createAsyncThunk(
  "coaches/addCoach",
  async (coach) => {
    const response = await addCoachAPI(coach);
    return response;
  }
);

export const updateCoach = createAsyncThunk(
  "coaches/updateCoach",
  async (updatedCoach) => {
    const response = await updateCoachAPI(updatedCoach);
    return response;
  }
);

export const deleteCoach = createAsyncThunk(
  "coaches/deleteCoach",
  async (id) => {
    await deleteCoachAPI(id);
    return id;
  }
);

// slice

export const coachesSlice = createSlice({
  name: "coaches",
  initialState,
  reducers: {
    filterCoaches: (state, action) => {
      state.filter = action.payload;
    },
    setCoachesView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchCoaches.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchCoaches.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchCoach.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchCoach.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addCoach.fulfilled, (state, action) => {
        state.view = "index";
      })
      .addCase(updateCoach.fulfilled, (state, action) => {
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(deleteCoach.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.coachId !== action.payload
        );
        state.item = null;
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterCoaches, setCoachesView } = coachesSlice.actions;
export default coachesSlice.reducer;
