import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { fetchCountriesAPI, fetchCountryAPI, addCountryAPI, updateCountryAPI } from "./countriesAPI";

const initialState = {
  items: [],
  fetching: false,
  filter: "",
  selected: null,
  fetchingSelected: false,
  view: "index", // index, details, new, edit, delete
};

// Thunks

export const fetchCountries = createAsyncThunk("countries/fetchCountries", async () => {
  const response = await fetchCountriesAPI();
  return response;
});

export const fetchCountry = createAsyncThunk(
  "countries/fetchCountry",
  async (countryId) => {
    const response = await fetchCountryAPI(countryId);
    return response;
  }
);

export const addCountry = createAsyncThunk("countries/addCountry", async (country) => {
  const response = await addCountryAPI(country);
  return response;
});

export const updateCountry = createAsyncThunk(
  "countries/updateCountry",
  async (updatedCountry) => {
    const response = await updateCountryAPI(updatedCountry);
    return response;
  }
);

// Slice

const countriesSlice = createSlice({
  name: "countries",
  initialState,
  reducers: {
    filterCountries: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    }
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchCountries.pending, (state) => {
        state.fetching = true;
      })
      .addCase(fetchCountries.fulfilled, (state, action) => {
        state.fetching = false;
        state.items = action.payload;
      })
      .addCase(fetchCountry.pending, (state) => {
        state.fetchingSelected = true;
      })
      .addCase(fetchCountry.fulfilled, (state, action) => {
        state.fetchingSelected = false;
        state.selected = action.payload;
      })
      .addCase(addCountry.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.selected = action.payload;
        state.view = "details";
      })
      .addCase(updateCountry.fulfilled, (state, action) => {
        state.selected = action.payload;
        state.items = state.items.map((item) =>
          item.countryId === action.payload.countryId ? action.payload : item
        );
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterCountries, setView } = countriesSlice.actions;

export default countriesSlice.reducer;
