import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchRefereesAPI,
  fetchRefereeAPI,
  addRefereeAPI,
  updateRefereeAPI,
  deleteRefereeAPI,
} from "./refereesAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchReferees = createAsyncThunk(
  "referees/fetchReferees",
  async () => {
    const response = await fetchRefereesAPI();
    return response;
  }
);

export const fetchReferee = createAsyncThunk(
  "referees/fetchReferee",
  async (id) => {
    const response = await fetchRefereeAPI(id);
    return response;
  }
);

export const addReferee = createAsyncThunk(
  "referees/addReferee",
  async (item) => {
    const response = await addRefereeAPI(item);
    return response;
  }
);

export const updateReferee = createAsyncThunk(
  "referees/updateReferee",
  async (item) => {
    const response = await updateRefereeAPI(item);
    return response;
  }
);

export const deleteReferee = createAsyncThunk(
  "referees/deleteReferee",
  async (id) => {
    await deleteRefereeAPI(id);
    return id;
  }
);

// slice

export const refereesSlice = createSlice({
  name: "referees",
  initialState,
  reducers: {
    filterReferees: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchReferees.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchReferees.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchReferee.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchReferee.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addReferee.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updateReferee.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.refereeId === action.payload.refereeId ? action.payload : item
        );
        state.view = "details";
      })
      .addCase(deleteReferee.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.refereeId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterReferees, setView } = refereesSlice.actions;
export default refereesSlice.reducer;
