import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchStadiaAPI,
  fetchStadiumAPI,
  addStadiumAPI,
  updateStadiumAPI,
  deleteStadiumAPI,
} from "./stadiaAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchStadia = createAsyncThunk("stadia/fetchStadia", async () => {
  const response = await fetchStadiaAPI();
  return response;
});

export const fetchStadium = createAsyncThunk(
  "stadia/fetchStadium",
  async (id) => {
    const response = await fetchStadiumAPI(id);
    return response;
  }
);

export const addStadium = createAsyncThunk(
  "stadia/addStadium",
  async (item) => {
    const response = await addStadiumAPI(item);
    return response;
  }
);

export const updateStadium = createAsyncThunk(
  "stadia/updateStadium",
  async (item) => {
    const response = await updateStadiumAPI(item);
    return response;
  }
);

export const deleteStadium = createAsyncThunk(
  "stadia/deleteStadium",
  async (id) => {
    await deleteStadiumAPI(id);
    return id;
  }
);

// slice

export const stadiaSlice = createSlice({
  name: "stadia",
  initialState,
  reducers: {
    filterStadia: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchStadia.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchStadia.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchStadium.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchStadium.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addStadium.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updateStadium.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.stadiumId === action.payload.stadiumId ? action.payload : item
        );
        state.view = "details";
      })
      .addCase(deleteStadium.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.stadiumId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterStadia, setView } = stadiaSlice.actions;
export default stadiaSlice.reducer;
