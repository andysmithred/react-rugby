import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import {
  addCityAPI,
  deleteCityAPI,
  fetchCitiesAPI,
  fetchCityAPI,
  updateCityAPI,
} from "./citiesAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  filter: "",
  selected: null,
  fetchingSelected: false,
  view: "index", // index, details, new, edit, delete
};

// Thunks

export const fetchCities = createAsyncThunk("cities/fetchCities", async () => {
  const response = await fetchCitiesAPI();
  return response;
});

export const fetchCity = createAsyncThunk(
  "cities/fetchCity",
  async (cityId) => {
    const response = await fetchCityAPI(cityId);
    return response;
  }
);

export const addCity = createAsyncThunk("cities/addCity", async (city) => {
  const response = await addCityAPI(city);
  return response;
});

export const updateCity = createAsyncThunk(
  "cities/updateCity",
  async (updatedCity) => {
    const response = await updateCityAPI(updatedCity);
    return response;
  }
);

export const deleteCity = createAsyncThunk("cities/deleteCity", async (id) => {
  await deleteCityAPI(id);
  return id;
});

// Slice

export const citiesSlice = createSlice({
  name: "cities",
  initialState,
  reducers: {
    filterCities: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchCities.pending, (state) => {
        state.fetching = true;
      })
      .addCase(fetchCities.fulfilled, (state, action) => {
        state.fetching = false;
        state.items = action.payload;
      })
      .addCase(fetchCity.pending, (state) => {
        state.fetchingSelected = true;
      })
      .addCase(fetchCity.fulfilled, (state, action) => {
        state.fetchingSelected = false;
        state.selected = action.payload;
      })
      .addCase(addCity.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.view = "index";
      })
      .addCase(updateCity.fulfilled, (state, action) => {
        state.selected = action.payload;
        state.items = state.items.map((item) =>
          item.cityId === action.payload.cityId ? action.payload : item
        );
        state.view = "details";
      })
      .addCase(deleteCity.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.cityId !== action.payload
        );
        state.selected = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterCities, setView } = citiesSlice.actions;

export default citiesSlice.reducer;
