import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchPlayersAPI,
  fetchPlayerAPI,
  addPlayerAPI,
  updatePlayerAPI,
  deletePlayerAPI,
} from "./playersAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchPlayers = createAsyncThunk("players/fetchPlayers", async () => {
  const response = await fetchPlayersAPI();
  return response;
});

export const fetchPlayer = createAsyncThunk(
  "players/fetchPlayer",
  async (id) => {
    const response = await fetchPlayerAPI(id);
    return response;
  }
);

export const addPlayer = createAsyncThunk(
  "players/addPlayer",
  async (item) => {
    const response = await addPlayerAPI(item);
    return response;
  }
);

export const updatePlayer = createAsyncThunk(
  "players/updatePlayer",
  async (item) => {
    const response = await updatePlayerAPI(item);
    return response;
  }
);

export const deletePlayer = createAsyncThunk(
  "players/deletePlayer",
  async (id) => {
    await deletePlayerAPI(id);
    return id;
  }
);

// slice

export const playersSlice = createSlice({
  name: "players",
  initialState,
  reducers: {
    filterPlayers: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchPlayers.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchPlayers.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchPlayer.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchPlayer.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addPlayer.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updatePlayer.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.playerId === action.payload.playerId ? action.payload : item
        );
        state.view = "details";
      })
      .addCase(deletePlayer.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.playerId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterPlayers, setView } = playersSlice.actions;
export default playersSlice.reducer;
