import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchPointTypesAPI,
  fetchPointTypeAPI,
  addPointTypeAPI,
  updatePointTypeAPI,
  deletePointTypeAPI,
} from "./pointTypesAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchPointTypes = createAsyncThunk(
  "pointTypes/fetchPointTypes",
  async () => {
    const response = await fetchPointTypesAPI();
    return response;
  }
);

export const fetchPointType = createAsyncThunk(
  "pointTypes/fetchPointType",
  async (id) => {
    const response = await fetchPointTypeAPI(id);
    return response;
  }
);

export const addPointType = createAsyncThunk(
  "pointTypes/addPointType",
  async (item) => {
    const response = await addPointTypeAPI(item);
    return response;
  }
);

export const updatePointType = createAsyncThunk(
  "pointTypes/updatePointType",
  async (item) => {
    const response = await updatePointTypeAPI(item);
    return response;
  }
);

export const deletePointType = createAsyncThunk(
  "pointTypes/deletePointType",
  async (id) => {
    await deletePointTypeAPI(id);
    return id;
  }
);

// slice

export const pointTypesSlice = createSlice({
  name: "pointTypes",
  initialState,
  reducers: {
    filterPointTypes: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchPointTypes.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchPointTypes.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchPointType.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchPointType.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addPointType.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updatePointType.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.pointTypeId === action.payload.pointTypeId
            ? action.payload
            : item
        );
        state.view = "details";
      })
      .addCase(deletePointType.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.pointTypeId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterPointTypes, setView } = pointTypesSlice.actions;
export default pointTypesSlice.reducer;
