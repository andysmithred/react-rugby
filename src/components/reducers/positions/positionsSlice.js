import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchPositionsAPI,
  fetchPositionAPI,
  addPositionAPI,
  updatePositionAPI,
  deletePositionAPI,
} from "./positionsAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchPositions = createAsyncThunk(
  "positions/fetchPositions",
  async () => {
    const response = await fetchPositionsAPI();
    return response;
  }
);

export const fetchPosition = createAsyncThunk(
  "positions/fetchPosition",
  async (id) => {
    const response = await fetchPositionAPI(id);
    return response;
  }
);

export const addPosition = createAsyncThunk(
  "positions/addPosition",
  async (item) => {
    const response = await addPositionAPI(item);
    return response;
  }
);

export const updatePosition = createAsyncThunk(
  "positions/updatePosition",
  async (item) => {
    const response = await updatePositionAPI(item);
    return response;
  }
);

export const deletePosition = createAsyncThunk(
  "positions/deletePosition",
  async (id) => {
    await deletePositionAPI(id);
    return id;
  }
);

// slice

export const positionsSlice = createSlice({
  name: "positions",
  initialState,
  reducers: {
    filterPositions: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchPositions.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchPositions.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchPosition.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchPosition.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addPosition.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updatePosition.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.positionId === action.payload.positionId
            ? action.payload
            : item
        );
        state.view = "details";
      })
      .addCase(deletePosition.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.positionId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterPositions, setView } = positionsSlice.actions;
export default positionsSlice.reducer;
