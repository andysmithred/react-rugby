import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchMatchPositionsAPI,
  fetchMatchPositionAPI,
  addMatchPositionAPI,
  updateMatchPositionAPI,
  deleteMatchPositionAPI,
} from "./matchPositionsAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchMatchPositions = createAsyncThunk(
  "matchPositions/fetchMatchPositions",
  async () => {
    const response = await fetchMatchPositionsAPI();
    return response;
  }
);

export const fetchMatchPosition = createAsyncThunk(
  "matchPositions/fetchMatchPosition",
  async (id) => {
    const response = await fetchMatchPositionAPI(id);
    return response;
  }
);

export const addMatchPosition = createAsyncThunk(
  "matchPositions/addMatchPosition",
  async (item) => {
    const response = await addMatchPositionAPI(item);
    return response;
  }
);

export const updateMatchPosition = createAsyncThunk(
  "matchPositions/updateMatchPosition",
  async (item) => {
    const response = await updateMatchPositionAPI(item);
    return response;
  }
);

export const deleteMatchPosition = createAsyncThunk(
  "matchPositions/deleteMatchPosition",
  async (id) => {
    await deleteMatchPositionAPI(id);
    return id;
  }
);

// slice

export const matchPositionsSlice = createSlice({
  name: "matchPositions",
  initialState,
  reducers: {
    filterMatchPositions: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchMatchPositions.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchMatchPositions.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchMatchPosition.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchMatchPosition.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addMatchPosition.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updateMatchPosition.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.matchPositionId === action.payload.matchPositionId
            ? action.payload
            : item
        );
        state.view = "details";
      })
      .addCase(deleteMatchPosition.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.matchPositionId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterMatchPositions, setView } = matchPositionsSlice.actions;
export default matchPositionsSlice.reducer;
