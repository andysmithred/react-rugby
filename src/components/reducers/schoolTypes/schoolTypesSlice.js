import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchSchoolTypesAPI,
  fetchSchoolTypeAPI,
  addSchoolTypeAPI,
  updateSchoolTypeAPI,
  deleteSchoolTypeAPI,
} from "./schoolTypesAPI";

const initialState = {
  items: [],
  fetching: false,
  filter: "",
  selected: null,
  fetchingSelected: false,
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchSchoolTypes = createAsyncThunk(
  "schoolTypes/fetchSchoolTypes",
  async () => {
    const response = await fetchSchoolTypesAPI();
    return response;
  }
);

export const fetchSchoolType = createAsyncThunk(
  "schoolTypes/fetchSchoolType",
  async (schoolTypeId) => {
    const response = await fetchSchoolTypeAPI(schoolTypeId);
    return response;
  }
);

export const addSchoolType = createAsyncThunk(
  "schoolTypes/addSchoolType",
  async (schoolType) => {
    const response = await addSchoolTypeAPI(schoolType);
    return response;
  }
);

export const updateSchoolType = createAsyncThunk(
  "schoolTypes/updateSchoolType",
  async (updatedSchoolType) => {
    const response = await updateSchoolTypeAPI(updatedSchoolType);
    return response;
  }
);

export const deleteSchoolType = createAsyncThunk(
  "schoolTypes/deleteSchoolType",
  async (id) => {
    await deleteSchoolTypeAPI(id);
    return id;
  }
);

// slice

export const schoolTypesSlice = createSlice({
  name: "schoolTypes",
  initialState,
  reducers: {
    filterSchoolTypes: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchSchoolTypes.pending, (state) => {
        state.fetching = true;
      })
      .addCase(fetchSchoolTypes.fulfilled, (state, action) => {
        state.fetching = false;
        state.items = action.payload;
      })
      .addCase(fetchSchoolType.pending, (state) => {
        state.fetchingSelected = true;
      })
      .addCase(fetchSchoolType.fulfilled, (state, action) => {
        state.fetchingSelected = false;
        state.selected = action.payload;
      })
      .addCase(addSchoolType.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.selected = action.payload;
        state.view = "details";
      })
      .addCase(updateSchoolType.fulfilled, (state, action) => {
        state.selected = action.payload;
        state.items = state.items.map((item) =>
          item.schoolTypeId === action.payload.schoolTypeId ? action.payload : item
        );
        state.view = "details";
      })
      .addCase(deleteSchoolType.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.schoolTypeId !== action.payload
        );
        state.selected = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterSchoolTypes, setView } = schoolTypesSlice.actions;

export default schoolTypesSlice.reducer;
