import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchMatchLineUpsAPI,
  fetchMatchLineUpAPI,
  addMatchLineUpAPI,
  updateMatchLineUpAPI,
  deleteMatchLineUpAPI,
} from "./matchLineUpsAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchMatchLineUps = createAsyncThunk(
  "matchLineUps/fetchMatchLineUps",
  async () => {
    const response = await fetchMatchLineUpsAPI();
    return response;
  }
);

export const fetchMatchLineUp = createAsyncThunk(
  "matchLineUps/fetchMatchLineUp",
  async (id) => {
    const response = await fetchMatchLineUpAPI(id);
    return response;
  }
);

export const addMatchLineUp = createAsyncThunk(
  "matchLineUps/addMatchLineUp",
  async (item) => {
    const response = await addMatchLineUpAPI(item);
    return response;
  }
);

export const updateMatchLineUp = createAsyncThunk(
  "matchLineUps/updateMatchLineUp",
  async (item) => {
    const response = await updateMatchLineUpAPI(item);
    return response;
  }
);

export const deleteMatchLineUp = createAsyncThunk(
  "matchLineUps/deleteMatchLineUp",
  async (id) => {
    await deleteMatchLineUpAPI(id);
    return id;
  }
);

// slice

export const matchLineUpsSlice = createSlice({
  name: "matchLineUps",
  initialState,
  reducers: {
    filterMatchLineUps: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchMatchLineUps.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchMatchLineUps.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchMatchLineUp.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchMatchLineUp.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addMatchLineUp.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updateMatchLineUp.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.matchLineUpId === action.payload.matchLineUpId
            ? action.payload
            : item
        );
        state.view = "details";
      })
      .addCase(deleteMatchLineUp.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.matchLineUpId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterMatchLineUps, setView } = matchLineUpsSlice.actions;
export default matchLineUpsSlice.reducer;
