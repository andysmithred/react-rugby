import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchCompetitionsAPI,
  fetchCompetitionAPI,
  addCompetitionAPI,
  updateCompetitionAPI,
  deleteCompetitionAPI,
} from "./competitionsAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchCompetitions = createAsyncThunk(
  "competitions/fetchCompetitions",
  async () => {
    const response = await fetchCompetitionsAPI();
    return response;
  }
);

export const fetchCompetition = createAsyncThunk(
  "competitions/fetchCompetition",
  async (id) => {
    const response = await fetchCompetitionAPI(id);
    return response;
  }
);

export const addCompetition = createAsyncThunk(
  "competitions/addCompetition",
  async (item) => {
    const response = await addCompetitionAPI(item);
    return response;
  }
);

export const updateCompetition = createAsyncThunk(
  "competitions/updateCompetition",
  async (item) => {
    const response = await updateCompetitionAPI(item);
    return response;
  }
);

export const deleteCompetition = createAsyncThunk(
  "competitions/deleteCompetition",
  async (id) => {
    await deleteCompetitionAPI(id);
    return id;
  }
);

// slice

export const competitionsSlice = createSlice({
  name: "competitions",
  initialState,
  reducers: {
    filterCompetitions: (state, action) => {
      state.filter = action.payload;
    },
    setCompetitionsView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchCompetitions.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchCompetitions.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchCompetition.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchCompetition.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addCompetition.fulfilled, (state, action) => {
        state.view = "index";
      })
      .addCase(updateCompetition.fulfilled, (state, action) => {
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(deleteCompetition.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.competitionId !== action.payload
        );
        state.item = null;
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterCompetitions, setCompetitionsView } = competitionsSlice.actions;
export default competitionsSlice.reducer;
