import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchTeamCountriesAPI,
  fetchTeamCountryAPI,
  addTeamCountryAPI,
  updateTeamCountryAPI,
  deleteTeamCountryAPI,
} from "./teamCountriesAPI";

const initialState = {
  items: [],
  fetchingItems: false,
  item: null,
  fetchingItem: false,
  filter: "",
  view: "index", // index, details, new, edit, delete
};

// Thunks;

export const fetchTeamCountries = createAsyncThunk(
  "teamCountries/fetchTeamCountries",
  async () => {
    const response = await fetchTeamCountriesAPI();
    return response;
  }
);

export const fetchTeamCountry = createAsyncThunk(
  "teamCountries/fetchTeamCountry",
  async (id) => {
    const response = await fetchTeamCountryAPI(id);
    return response;
  }
);

export const addTeamCountry = createAsyncThunk(
  "teamCountries/addTeamCountry",
  async (item) => {
    const response = await addTeamCountryAPI(item);
    return response;
  }
);

export const updateTeamCountry = createAsyncThunk(
  "teamCountries/updateTeamCountry",
  async (item) => {
    const response = await updateTeamCountryAPI(item);
    return response;
  }
);

export const deleteTeamCountry = createAsyncThunk(
  "teamCountries/deleteTeamCountry",
  async (id) => {
    await deleteTeamCountryAPI(id);
    return id;
  }
);

// slice

export const teamCountriesSlice = createSlice({
  name: "teamCountries",
  initialState,
  reducers: {
    filterTeamCountries: (state, action) => {
      state.filter = action.payload;
    },
    setView: (state, action) => {
      state.view = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchTeamCountries.pending, (state) => {
        state.fetchingItems = true;
      })
      .addCase(fetchTeamCountries.fulfilled, (state, action) => {
        state.fetchingItems = false;
        state.items = action.payload;
      })
      .addCase(fetchTeamCountry.pending, (state) => {
        state.fetchingItem = true;
      })
      .addCase(fetchTeamCountry.fulfilled, (state, action) => {
        state.fetchingItem = false;
        state.item = action.payload;
      })
      .addCase(addTeamCountry.fulfilled, (state, action) => {
        state.items.push(action.payload);
        state.item = action.payload;
        state.view = "details";
      })
      .addCase(updateTeamCountry.fulfilled, (state, action) => {
        state.item = action.payload;
        state.items = state.items.map((item) =>
          item.teamCountryId === action.payload.teamCountryId
            ? action.payload
            : item
        );
        state.view = "details";
      })
      .addCase(deleteTeamCountry.fulfilled, (state, action) => {
        state.items = state.items.filter(
          (item) => item.teamCountryId !== action.payload
        );
        state.item = state.items[0];
        state.view = "details";
      });
  },
});

// These 'actions' have been automatically generated by createSlice
export const { filterTeamCountries, setView } = teamCountriesSlice.actions;
export default teamCountriesSlice.reducer;
